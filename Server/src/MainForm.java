/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.google.gson.Gson;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Label;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.CharacterCodingException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Charmal
 */
public final class MainForm extends javax.swing.JFrame {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerPanel = new java.awt.Panel();
        r1Panel = new java.awt.Panel();
        r1Label = new java.awt.Label();
        r2Panel = new java.awt.Panel();
        r2Label = new java.awt.Label();
        b2Panel = new java.awt.Panel();
        b2Label = new java.awt.Label();
        b1Panel = new java.awt.Panel();
        b1Label = new java.awt.Label();
        commonMessageTextArea = new java.awt.TextArea();
        mainInfoPanel = new java.awt.Panel();
        label4 = new java.awt.Label();
        serverConnectionLabel = new java.awt.Label();
        label1 = new java.awt.Label();
        usernameLabel = new java.awt.Label();
        label3 = new java.awt.Label();
        dealAmountLabel = new java.awt.Label();
        gameStatTextArea = new javax.swing.JTextArea();
        matchStatTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1300, 700));
        setResizable(false);

        playerPanel.setMaximumSize(new java.awt.Dimension(1500, 100));

        javax.swing.GroupLayout playerPanelLayout = new javax.swing.GroupLayout(playerPanel);
        playerPanel.setLayout(playerPanelLayout);
        playerPanelLayout.setHorizontalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1081, Short.MAX_VALUE)
        );
        playerPanelLayout.setVerticalGroup(
            playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r1Panel.setBackground(new java.awt.Color(255, 51, 51));
        r1Panel.setMaximumSize(new java.awt.Dimension(70, 100));
        r1Panel.setMinimumSize(new java.awt.Dimension(70, 100));
        r1Panel.setPreferredSize(new java.awt.Dimension(70, 100));

        javax.swing.GroupLayout r1PanelLayout = new javax.swing.GroupLayout(r1Panel);
        r1Panel.setLayout(r1PanelLayout);
        r1PanelLayout.setHorizontalGroup(
            r1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        r1PanelLayout.setVerticalGroup(
            r1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r1Label.setAlignment(java.awt.Label.CENTER);
        r1Label.setBackground(new java.awt.Color(255, 51, 51));
        r1Label.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        r2Panel.setBackground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout r2PanelLayout = new javax.swing.GroupLayout(r2Panel);
        r2Panel.setLayout(r2PanelLayout);
        r2PanelLayout.setHorizontalGroup(
            r2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        r2PanelLayout.setVerticalGroup(
            r2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        r2Label.setAlignment(java.awt.Label.CENTER);
        r2Label.setBackground(new java.awt.Color(255, 51, 51));
        r2Label.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        b2Panel.setBackground(new java.awt.Color(51, 51, 255));
        b2Panel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout b2PanelLayout = new javax.swing.GroupLayout(b2Panel);
        b2Panel.setLayout(b2PanelLayout);
        b2PanelLayout.setHorizontalGroup(
            b2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        b2PanelLayout.setVerticalGroup(
            b2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        b2Label.setAlignment(java.awt.Label.CENTER);
        b2Label.setBackground(new java.awt.Color(0, 0, 255));
        b2Label.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        b1Panel.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout b1PanelLayout = new javax.swing.GroupLayout(b1Panel);
        b1Panel.setLayout(b1PanelLayout);
        b1PanelLayout.setHorizontalGroup(
            b1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        b1PanelLayout.setVerticalGroup(
            b1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        b1Label.setAlignment(java.awt.Label.CENTER);
        b1Label.setBackground(new java.awt.Color(0, 0, 255));
        b1Label.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N

        commonMessageTextArea.setName(""); // NOI18N
        commonMessageTextArea.setVisible(false);

        mainInfoPanel.setBackground(new java.awt.Color(240, 240, 240));

        label4.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        label4.setText("Server Connection");

        serverConnectionLabel.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        label1.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        label1.setText("Username");

        usernameLabel.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        label3.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        label3.setText("My bid");

        dealAmountLabel.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        gameStatTextArea.setEditable(false);
        gameStatTextArea.setColumns(20);
        gameStatTextArea.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        gameStatTextArea.setRows(5);
        gameStatTextArea.setFocusable(false);

        matchStatTextArea.setEditable(false);
        matchStatTextArea.setColumns(20);
        matchStatTextArea.setFont(new java.awt.Font("Verdana", 0, 9)); // NOI18N
        matchStatTextArea.setRows(5);
        matchStatTextArea.setFocusable(false);

        javax.swing.GroupLayout mainInfoPanelLayout = new javax.swing.GroupLayout(mainInfoPanel);
        mainInfoPanel.setLayout(mainInfoPanelLayout);
        mainInfoPanelLayout.setHorizontalGroup(
            mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainInfoPanelLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matchStatTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gameStatTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainInfoPanelLayout.createSequentialGroup()
                        .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dealAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverConnectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        mainInfoPanelLayout.setVerticalGroup(
            mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainInfoPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverConnectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(mainInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dealAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(gameStatTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(matchStatTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        fileMenu.setText("File");

        connectMenuItem.setText("Connect to Server");
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(connectMenuItem);

        jMenuItem2.setText("Console message");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);
        fileMenu.getAccessibleContext().setAccessibleDescription("");

        helpMenu.setText("Help");

        jMenuItem3.setText("Help manual");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                biddingHelpActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem3);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(282, 282, 282)
                                .addComponent(b1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(r1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(b2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(r2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(b2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(334, 334, 334)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mainInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(commonMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {b1Panel, b2Panel, r1Panel, r2Panel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(commonMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(r1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mainInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(b2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(b2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49)
                                        .addComponent(b1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(r1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(121, 121, 121)))))
                        .addGap(24, 24, 24)
                        .addComponent(b1Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(r2Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(r2Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {b1Panel, b2Panel, playerPanel, r1Panel, r2Panel});

        r1Label.getAccessibleContext().setAccessibleName("player");

        getAccessibleContext().setAccessibleName("frame1");
        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    static boolean ServerConnected;

    List<String> CardList;

    private static Client ClientObj;

    private String CurrentPlayer;

    private String Username;

    Panel CurrentPanel;

    Label CurrentLabel;

    /**
     * Creates new form MainForm
     */
    public MainForm() {

        initComponents();

        ClientObj = new Client();

        serverConnectionPopup();

        modifyLayouts();

    }

    /**
     *
     */
    public void displayServerConnection() {
        if (ServerConnected) {
            serverConnectionLabel.setText("Connected");
            this.setTitle("User connected. Play card..");
            new ListenFromServer().start();
        } else {
            serverConnectionLabel.setText("Not Connected");
            this.setTitle("Not Connected to the server. "
                    + "Use server IP /port and username to connect");
        }
    }

    private void modifyLayouts() {
        playerPanel.setLayout(new GridLayout(1, 13));
        b1Panel.setLayout(new GridLayout(1, 1));
        b2Panel.setLayout(new GridLayout(1, 1));
        r1Panel.setLayout(new GridLayout(1, 1));
        r2Panel.setLayout(new GridLayout(1, 1));
    }

    private void connectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectMenuItemActionPerformed

        if (!ServerConnected) {
            serverConnectionPopup();

            displayServerConnection();
        } else {
            JOptionPane.showConfirmDialog(null, null, "Already connected to the server",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);
        }


    }//GEN-LAST:event_connectMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        consoleMessagePopup();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void biddingHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_biddingHelpActionPerformed
        openHtml("help/Manual.pdf");
    }//GEN-LAST:event_biddingHelpActionPerformed

    private void openHtml(String fileWithPath) {
        File htmlFile = new File(fileWithPath);

        try {
            // open the default web browser for the HTML page
            Desktop.getDesktop().browse(htmlFile.toURI());
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label b1Label;
    private java.awt.Panel b1Panel;
    private java.awt.Label b2Label;
    private java.awt.Panel b2Panel;
    private java.awt.TextArea commonMessageTextArea;
    private javax.swing.JMenuItem connectMenuItem;
    private java.awt.Label dealAmountLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextArea gameStatTextArea;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private java.awt.Label label1;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Panel mainInfoPanel;
    private javax.swing.JTextArea matchStatTextArea;
    private java.awt.Panel playerPanel;
    private java.awt.Label r1Label;
    private java.awt.Panel r1Panel;
    private java.awt.Label r2Label;
    private java.awt.Panel r2Panel;
    private java.awt.Label serverConnectionLabel;
    private java.awt.Label usernameLabel;
    // End of variables declaration//GEN-END:variables

    private void consoleMessagePopup() {

        commonMessageTextArea.setVisible(true);

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Message(s)"));
        panel.add(commonMessageTextArea);

        JOptionPane.showConfirmDialog(null, panel, "Console Message",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

    }

    private void serverConnectionPopup() {

        JTextField serverIpText = new JTextField("localhost");
        JTextField portText = new JTextField("1500");
        JTextField usernameText = new JTextField(" ");

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Server Ip"));
        panel.add(serverIpText);

        panel.add(new JLabel("Port"));
        panel.add(portText);

        panel.add(new JLabel("Username"));
        panel.add(usernameText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Connect to the server",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {

            ServerConnected = ClientObj.start(serverIpText.getText().trim(),
                    portText.getText().trim(), usernameText.getText().trim());

            displayServerConnection();
        } else {
            ClientObj.display("Cancelled");

            System.exit(0);
        }

    }

    private void usernamePopup(String playerName) {

        JTextField usernameText = new JTextField();

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Username"));
        panel.add(usernameText);

        JOptionPane.showConfirmDialog(null, panel, "Username already exists. Use another user name.",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

        Message message = new Message(MessageType.ONNECTIONESTABLISH_CLIENT_USERNAMEDUPLICATE_RESPONSE.getValue(),
                true, usernameText.getText() + "sends the username again", false, ErrorMessageType.NONE.getValue());

        message.ConnectionMessage = (new ConnectionMessage(playerName, usernameText.getText()));

        ClientObj.sendMessage(message);

        Username = usernameText.getText();

        usernameLabel.setText(Username);

    }

    private void addBidPopup() {

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("Your bid"));

        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement("1");
        model.addElement("2");
        model.addElement("3");
        model.addElement("4");
        model.addElement("5");
        model.addElement("6");
        model.addElement("7");
        model.addElement("8");
        model.addElement("9");
        model.addElement("10");
        model.addElement("11");
        model.addElement("12");
        model.addElement("13");

        JComboBox comboBox = new JComboBox(model);
        panel.add(comboBox);

        int result = JOptionPane.showConfirmDialog(null, panel, this.Username + " add your bid.",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

        int amount = Integer.parseInt(comboBox.getSelectedItem().toString());

        Message message = new Message(MessageType.BIDDING_CLIENTRESPONSE.getValue(),
                true, Username + "send bid amount.", false, ErrorMessageType.NONE.getValue());

        dealAmountLabel.setText(Integer.toString(amount));

        message.BiddingMessage = (new BiddingMessage(CurrentPlayer, amount,"s"));

        ClientObj.sendMessage(message);
    }

    private void playWrongCardPopup(PlayGameMessage message) throws IOException {

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel("You draw a wrong card "));

        JOptionPane.showConfirmDialog(null, panel, "You draw a wrong card",
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

        drawImage(message.getCard());

        removeAllComponents(CurrentPanel);

        drawPlayerPanel();

        playerPanel.setEnabled(true);
    }

    private void trickWonPopup(String username) {

        String displayMessage = "This trick won by " + username;

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel(displayMessage));

        JOptionPane.showConfirmDialog(null, panel, displayMessage,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

        removeAllComponents(b1Panel);
        removeAllComponents(r1Panel);
        removeAllComponents(b2Panel);
        removeAllComponents(r2Panel);
    }

    private void matchWonPopup(MatchWonMessage matchWonMessage) {

        if (matchWonMessage != null && matchWonMessage.getWonTeam() != null) {

            String displayMessage = "Match won by " + matchWonMessage.getWonTeam() + " team";

            JPanel panel = new JPanel(new GridLayout(0, 1));

            panel.add(new JLabel(displayMessage));

            JOptionPane.showConfirmDialog(null, panel, displayMessage,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

            removeAllComponents(b1Panel);
            removeAllComponents(r1Panel);
            removeAllComponents(b2Panel);
            removeAllComponents(r2Panel);
        }
    }

    private void dealAgainPopup() {
        String displayMessage = "Match not finished. Server deals cards again";

        JPanel panel = new JPanel(new GridLayout(0, 1));

        panel.add(new JLabel(displayMessage));

        JOptionPane.showConfirmDialog(null, panel, displayMessage,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

        removeAllComponents(b1Panel);
        removeAllComponents(r1Panel);
        removeAllComponents(b2Panel);
        removeAllComponents(r2Panel);
        removeAllComponents(playerPanel);

    }

    private void appendTextCommonMessage(String message) {
        commonMessageTextArea.append(message);
    }

    private Image getImage(String card) throws IOException {
        return ImageIO.read(getClass().getResource("/resources/" + card + ".png"));
    }

    private void sendSelectedCard(String card) {

        int dialogResult = JOptionPane.showConfirmDialog(null,
                "Would you like procced?", "Warning", JOptionPane.YES_OPTION);

        if (dialogResult == JOptionPane.YES_OPTION) {

            loadSelectedCard(card, CurrentPanel);

            removeButtonFromPlayerPanel(card);

            sendSelectedCardToServer(card);
        }

    }

    private void loadSelectedCard(String card, Panel panel) {
        try {
            Image img = getImage(card);

            loadCard(img, panel);

        } catch (IOException ex) {
            System.out.println(ex);
        }
    }

    private void removeButtonFromPlayerPanel(String buttonName) {

        Component[] componentList = playerPanel.getComponents();

        for (Component c : componentList) {

            if (c instanceof JButton && c.getName().equals(buttonName)) {

                playerPanel.remove(c);
            }
        }

        playerPanel.revalidate();
        playerPanel.repaint();

        playerPanel.setEnabled(false);
    }

    private void removeAllComponents(Panel panel) {

        Component[] componentList = panel.getComponents();

        for (Component c : componentList) {

            if (c instanceof JButton) {

                panel.remove(c);
            }
        }

        panel.revalidate();
        panel.repaint();
    }

    private void loadCard(Image image, Panel panel) {
        removeAllComponents(panel);

        JButton label = new JButton();
        label.setIcon(new ImageIcon(image));
        label.setSize(70, 100);
        panel.add(label);
    }

    private void loadCards(ArrayList<String> cards) {
        try {

            CardList = cards;

            loadPlayerPanel();

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void loadPlayerPanel() {
        try {

            for (final String card : CardList) {

                drawImage(card);
            }

            drawPlayerPanel();

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void drawPlayerPanel() {
        playerPanel.revalidate();
        playerPanel.repaint();

        playerPanel.setEnabled(false);
    }

    private void drawImage(final String card) throws IOException {
        Image img = getImage(card);

        JButton button = new JButton();
        button.setName(card);
        button.setIcon(new ImageIcon(img));
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendSelectedCard(card);
            }
        });
        button.setSize(50, 75);

        playerPanel.add(button);
    }

    private void selectCard() {
        try {

            JPanel panel = new JPanel(new GridLayout(0, 1));

            panel.add(new JLabel("Select a card to procced "));

            JOptionPane.showConfirmDialog(null, panel, this.Username + " select a card",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE);

            playerPanel.setEnabled(true);

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void sendSelectedCardToServer(String card) {
        Message message = new Message(MessageType.PLAYGAME_CLIENTRESPONSE.getValue(),
                true, this.Username + " selected card : " + card, false, ErrorMessageType.NONE.getValue());

        message.PlayGameMessage = (new PlayGameMessage(this.CurrentPlayer,
                card));
        this.ClientObj.sendMessage(message);
    }

    class ListenFromServer extends Thread {

        public void run() {
            while (true) {
                try {

                    Message message = readMessage(ClientObj.inputStream);// (Message) ClientObj.sInput.readObject();

                    System.out.print(message.getMessage());
                    appendTextCommonMessage(message.getMessage() + "\n");

                    switch (message.getMessageType()) {
                        case NONE:
                            System.out.print("None message type send form serer");
                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE:

                            if (message.IsError) {
                                displayErrorMessage(message);
                            } else {
                                setClient(message.ConnectionMessage);
                            }

                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE_OTHERPLAYERS:
                            setOtherPlayers(message.ConnectionMessage);
                            break;
                        case CONNECTIONESTABLISH_SERVERESPONSE_PREVIOUSPLAYERS:
                            setOtherPlayers(message.ConnectionMessage);
                            break;
                        case BIDDING_SERVERREQUEST:
                            biddingMessage(message.BiddingMessage);
                            break;
                        case DEAL_CARDS_TO_CLIENT:
                            loadCardsMessage(message.CardMessage);
                            break;
                        case PLAYGAME_SERVERREQUEST:
                            playGameMessage(message.PlayGameMessage);
                            break;
                        case PLAYGAME_SERVERRESPONSE:
                            if (message.IsError) {
                                playWrongCardPopup(message.PlayGameMessage);
                            } else {
                                setOtherPlayerCard(message.PlayGameMessage);
                            }
                            break;
                        case PLAYGAME_SERVERRESPONSE_PLAYER_WON_TRICK:
                            setTrickWonMessage(message.PlayGameMessage);
                            break;
                        case PLAYGAME_SERVERRESPONSE_TEAM_SCORE:
                            setTeamScoreMessage(message.GameStatMessage);
                            setMatchStatMessage(message.MatchStatMessage.toString());
                            break;
                        case PLAYGAME_SERVERRESPONSE_TEAM_WON_GAME_WITH_DEAL_CARDS:
                            setMatchStatMessage(message.MatchStatMessage.toString());
                            setDealAgainMessage();
                            clearMyBid();
                            break;
                        case PLAYGAME_SERVERRESPONSE_TEAM_WON_MATCH:
                            setMatchStatMessage(message.MatchStatMessage.toString());
                            setMatchWonMessage(message.MatchWonMessage);
                            clearMyBid();
                            break;

                    }

                    System.out.print('\n');

                } catch (IOException e) {
                    break;
                }
            }
        }

        private void setClient(ConnectionMessage connectionMessage) {
            Username = connectionMessage.getUsername();
            usernameLabel.setText(Username);

            CurrentPlayer = connectionMessage.getPlayerName();

            CurrentPanel = selectPanel(CurrentPlayer);

            selectLabel(CurrentPlayer).setText(connectionMessage.getUsername());

        }

        private Panel selectPanel(String player) {
            Panel panel = null;

            if (player.equalsIgnoreCase("b1")) {
                panel = b1Panel;
            } else if (player.equalsIgnoreCase("b2")) {
                panel = b2Panel;
            } else if (player.equalsIgnoreCase("r1")) {
                panel = r1Panel;
            } else if (player.equalsIgnoreCase("r2")) {
                panel = r2Panel;
            }

            return panel;
        }

        private Label selectLabel(String player) {

            Label label = null;

            if (player.equalsIgnoreCase("b1")) {
                label = b1Label;
            } else if (player.equalsIgnoreCase("b2")) {
                label = b2Label;
            } else if (player.equalsIgnoreCase("r1")) {
                label = r1Label;
            } else if (player.equalsIgnoreCase("r2")) {
                label = r2Label;
            }

            return label;
        }

        private void setOtherPlayers(ConnectionMessage connectionMessage) {
            String player = connectionMessage.getPlayerName();

            selectLabel(player).setText(connectionMessage.getUsername());
        }

        private void biddingMessage(BiddingMessage biddingMessage) {

            if (biddingMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                addBidPopup();

            }
        }

        private void loadCardsMessage(CardMessage cardMessage) {
            if (cardMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                loadCards(cardMessage.getInitialSetOfCards());
            }
        }

        private void displayErrorMessage(Message message) {
            ErrorMessageType messageType = ErrorMessageType.getEnum(message.ErrorType);
            switch (messageType) {
                case NONE:
                    break;
                case USERNAME_EXISTS:
                    usernamePopup(message.ConnectionMessage.getPlayerName());
                    break;
                case BIDDING_LARGERBID:
                    break;
                case PLAY_CHEATCARD:
                    break;
                default:
                    throw new AssertionError(messageType.name());

            }
        }

        private void playGameMessage(PlayGameMessage playGameMessage) {

            if (playGameMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                selectCard();
            }
        }

        private void setOtherPlayerCard(PlayGameMessage playGameMessage) {
            if (!playGameMessage.getPlayerName().equalsIgnoreCase(CurrentPlayer)) {
                loadSelectedCard(playGameMessage.getCard(),
                        selectPanel(playGameMessage.getPlayerName()));

            }
        }

        private void setTrickWonMessage(PlayGameMessage playGameMessage) {
            trickWonPopup(playGameMessage.getUsername());
        }

        private void setTeamScoreMessage(GameStatMessage gameStatMessage) {

            String gameStat = "";

            gameStat = "User(team)" + "\t" + "Bid" + "\t" + "Won" + "\n";

            for (String userStat : gameStatMessage.getUsernameBids()) {
                gameStat += userStat + "\n";
            }
            gameStatTextArea.setText(gameStat);

            LinkedHashMap<String, Integer> userBids = gameStatMessage.userBids;

            for (String key : userBids.keySet()) {
                if (userBids.get(key).toString() == CurrentPlayer) {
                    usernameLabel.setText(Username + "-" + userBids.get(key).valueOf(key));
                } 
            }
        }

        private void setMatchStatMessage(String matchStat) {
            matchStatTextArea.setText(matchStat);
        }

        private void setMatchWonMessage(MatchWonMessage matchWonMessage) {
            matchWonPopup(matchWonMessage);
        }

        private void setDealAgainMessage() {
            dealAgainPopup();
        }

        private void clearMyBid() {
            dealAmountLabel.setText("");
        }

        private Message readMessage(InputStream inputStream) throws CharacterCodingException, IOException {

            byte[] lenBytes = new byte[4];

            inputStream.read(lenBytes, 0, 4);

            int len = (((lenBytes[3] & 0xff) << 24) | ((lenBytes[2] & 0xff) << 16)
                    | ((lenBytes[1] & 0xff) << 8) | (lenBytes[0] & 0xff));

            byte[] receivedBytes = new byte[len];

            inputStream.read(receivedBytes, 0, len);

            String received = new String(receivedBytes, 0, len);

            System.out.println( "Client Id" + CurrentPlayer +  "From Server received: " + received);

            Message message = new Gson().fromJson(received, Message.class);

            return message;

        }
    }

}
